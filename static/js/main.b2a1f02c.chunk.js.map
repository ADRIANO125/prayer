{"version":3,"sources":["Components/Prayer.js","App.js","reportWebVitals.js","index.js"],"names":["Prayer","_ref","name","time","React","createElement","className","App","PrayerTimings","setPrayerTimings","useState","PrayerDate","setPrayerDate","city","setCity","useEffect","async","response","fetch","data_prayer","json","data","timings","date","gregorian","console","log","error","FetchPrayerTimings","FormatTimes","hours","minutes","split","map","Number","period","toString","padStart","onChange","e","target","value","city_obj","key","Fajr","Dhuhr","Asr","Maghrib","Isha","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+JAGe,SAASA,EAAMC,GAAiB,IAAhBC,KAAEA,EAAIC,KAAEA,GAAMF,EAC3C,OACEG,IAAAC,cAAA,OAAKC,UAAU,UACXF,IAAAC,cAAA,KAAGC,UAAU,eAAeJ,GAC5BE,IAAAC,cAAA,KAAGC,UAAU,eAAeH,ICyFrBI,MA7Ff,WAEA,MAAMC,EAAgBC,GAAoBC,mBAAS,KAC5CC,EAAaC,GAAkBF,mBAAS,KACxCG,EAAOC,GAAYJ,mBAAS,SAsBjCK,oBAAU,KACgBC,WACtB,IACE,MAAMC,QAAiBC,6EAA6EL,KAC9FM,QAAoBF,EAASG,OAGnCX,EAAiBU,EAAYE,KAAKC,SAClCV,EAAcO,EAAYE,KAAKE,KAAKC,UAAUD,MAC9CE,QAAQC,IAAIP,GAId,MAAMQ,GACJF,QAAQE,MAAMA,KAIlBC,IAEA,CAACf,IAGH,MAAMgB,EAAe1B,IACnB,IAAKA,EACH,MAAO,QAGT,MAAO2B,EAAOC,GAAW5B,EAAK6B,MAAM,KAAKC,IAAIC,QAEvCC,EAASL,GAAS,GAAK,KAAO,KAEpC,SAHuBA,EAAQ,IAAM,MAGTC,EAAQK,WAAWC,SAAS,EAAG,QAAQF,KAKrE,OACE/B,IAAAC,cAAA,eACED,IAAAC,cAAA,OAAKC,UAAU,aACbF,IAAAC,cAAA,OAAKC,UAAU,eACbF,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UAAI,8CACJD,IAAAC,cAAA,UAAQiC,SAAWC,IACjBzB,EAAQyB,EAAEC,OAAOC,SA9DjB,CACV,CAACvC,KAAK,6CAAUuC,MAAO,SACvB,CAACvC,KAAK,+DAAauC,MAAO,cAC1B,CAACvC,KAAK,qEAAcuC,MAAO,YAC3B,CAACvC,KAAK,uCAASuC,MAAO,QACtB,CAACvC,KAAK,mDAAWuC,MAAO,YACxB,CAACvC,KAAK,uCAASuC,MAAO,QACtB,CAACvC,KAAK,6CAAUuC,MAAO,WACvB,CAACvC,KAAK,iCAAQuC,MAAO,SACrB,CAACvC,KAAK,iCAAQuC,MAAO,SACrB,CAACvC,KAAK,iCAAQuC,MAAO,SACrB,CAACvC,KAAK,uCAASuC,MAAO,UAqDJR,IAAKS,GACXtC,IAAAC,cAAA,UAAQsC,IAAKD,EAASD,MAAOA,MAAOC,EAASD,OAAQ,IAAEC,EAASxC,KAAK,QAI3EE,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UAAI,8CACJD,IAAAC,cAAA,UAAKM,KAITP,IAAAC,cAACL,EAAM,CAACE,KAAM,mCAAUC,KAAO0B,EAAarB,EAAcoC,QAC1DxC,IAAAC,cAACL,EAAM,CAACE,KAAM,mCAAUC,KAAO0B,EAAarB,EAAcqC,SAC1DzC,IAAAC,cAACL,EAAM,CAACE,KAAM,mCAAUC,KAAO0B,EAAarB,EAAcsC,OAC1D1C,IAAAC,cAACL,EAAM,CAACE,KAAM,yCAAWC,KAAO0B,EAAarB,EAAcuC,WAC3D3C,IAAAC,cAACL,EAAM,CAACE,KAAM,yCAAWC,KAAO0B,EAAarB,EAAcwC,WC9EpDC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAb,EAAA,GAAAc,KAAAD,EAAAE,KAAA,UAAqBD,KAAKpD,IAAiD,IAAhDsD,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAAS1D,EACpEsD,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5D,IAAAC,cAACD,IAAM6D,WAAU,KACf7D,IAAAC,cAACE,EAAG,QAOR0C","file":"static/js/main.b2a1f02c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function Prayer({ name, time }) {\r\n  return (\r\n    <div className='prayer'>\r\n        <p className='name-prayer'>{name}</p>\r\n        <p className='time-prayer'>{time}</p>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from \"react\";\nimport Prayer from \"./Components/Prayer\";\n\nfunction App() {\n\nconst[PrayerTimings , setPrayerTimings] = useState({})\nconst[ PrayerDate , setPrayerDate ] = useState(\"\")\nconst[ city , setCity ] = useState(\"Cairo\")\n\n\n\n  var cities =[\n    {name:\"القاهرة\",value: \"Cairo\"},\n    {name:\"الإسكندرية\",value: \"Alexandria\"},\n    {name:\"الإسماعيلية\",value: \"Ismailia\"},\n    {name:\"السويس\",value: \"Suez\"},\n    {name:\"المنصورة\",value: \"Mansoura\"},\n    {name:\"الجيزة\",value: \"Giza\"},\n    {name:\"الشرقية\",value: \"Sharqia\"},\n    {name:\"أسيوط\",value: \"Asyut\"},\n    {name:\"سوهاج\",value: \"Sohag\"},\n    {name:\"أسيوط\",value: \"Asyut\"},\n    {name:\"المنيا\",value: \"Minya\"}\n  ]\n\n  \n  \n\n\n  useEffect(()=>{\n    var FetchPrayerTimings =async () => {\n      try{\n        const response = await fetch(`https://api.aladhan.com/v1/timingsByCity/10-11-2024?city=Eg&country=${city}`)\n        const data_prayer = await response.json();\n\n\n        setPrayerTimings(data_prayer.data.timings)\n        setPrayerDate(data_prayer.data.date.gregorian.date)\n        console.log(data_prayer);\n        \n\n      }\n      catch(error){\n        console.error(error)\n      }\n    }\n\n    FetchPrayerTimings()\n\n  },[city]);\n\n\n  const FormatTimes = (time) => {\n    if (!time) {\n      return \"00:00\";\n    }\n    \n    const [hours, minutes] = time.split(\":\").map(Number);\n    const formattedHours = hours % 12 || 12; \n    const period = hours >= 12 ? \"PM\" : \"AM\";\n    \n    return `${formattedHours}:${minutes.toString().padStart(2, '0')} ${period}`;\n  };\n\n\n\n  return (\n    <section>\n      <div className=\"container\">\n        <div className=\"top-section\">\n          <div className=\"city\">\n            <h2>المدينه</h2>\n            <select onChange={(e)=>{\n              setCity(e.target.value)\n            }}>\n              {cities.map((city_obj)=>(\n                <option key={city_obj.value} value={city_obj.value} > {city_obj.name} </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"date\">\n            <h2>التاريخ</h2>\n            <h4>{PrayerDate}</h4>\n          </div>\n        </div>\n        {/* prayer cart  */}\n        <Prayer name= \" الفجر \" time={ FormatTimes (PrayerTimings.Fajr)} />\n        <Prayer name= \" الضهر \" time={ FormatTimes (PrayerTimings.Dhuhr)}/>\n        <Prayer name= \" العصر \" time={ FormatTimes (PrayerTimings.Asr)}/>\n        <Prayer name= \" المغرب \" time={ FormatTimes (PrayerTimings.Maghrib)}/>\n        <Prayer name= \" العشاء \" time={ FormatTimes (PrayerTimings.Isha)}/>\n      </div>\n    </section>\n  );\n}\n\nexport default App ;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}